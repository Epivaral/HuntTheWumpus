{"ast":null,"code":"const BOARD_SIZE = 20;\nconst NUM_BATS = 8;\nconst NUM_PITS = 4;\nfunction getRandomEmptyCell(occupied) {\n  let x, y;\n  do {\n    x = Math.floor(Math.random() * BOARD_SIZE);\n    y = Math.floor(Math.random() * BOARD_SIZE);\n  } while (occupied.has(`${x},${y}`));\n  occupied.add(`${x},${y}`);\n  return {\n    x,\n    y\n  };\n}\nexport function createNewGame() {\n  const occupied = new Set();\n  // Place agent\n  const agentPos = getRandomEmptyCell(occupied);\n  // Place wumpus\n  const wumpusPos = getRandomEmptyCell(occupied);\n  // Place gold\n  const goldPos = getRandomEmptyCell(occupied);\n  // Place bats\n  const batPositions = Array.from({\n    length: NUM_BATS\n  }, () => getRandomEmptyCell(occupied));\n  // Place pits\n  const pitPositions = Array.from({\n    length: NUM_PITS\n  }, () => getRandomEmptyCell(occupied));\n\n  // Build board\n  const board = Array.from({\n    length: BOARD_SIZE\n  }, (_, y) => Array.from({\n    length: BOARD_SIZE\n  }, (_, x) => ({\n    type: 'empty',\n    explored: false\n  })));\n  board[agentPos.y][agentPos.x] = {\n    type: 'agent',\n    explored: true\n  };\n  board[wumpusPos.y][wumpusPos.x] = {\n    type: 'wumpus',\n    explored: false\n  };\n  board[goldPos.y][goldPos.x] = {\n    type: 'gold',\n    explored: false\n  };\n  batPositions.forEach(({\n    x,\n    y\n  }) => board[y][x] = {\n    type: 'bat',\n    explored: false\n  });\n  pitPositions.forEach(({\n    x,\n    y\n  }) => board[y][x] = {\n    type: 'pit',\n    explored: false\n  });\n  return {\n    board,\n    agentPos,\n    wumpusPos,\n    goldPos,\n    batPositions,\n    pitPositions,\n    explored: Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill(false)),\n    status: 'playing',\n    stats: {\n      games: 1,\n      victories: 0\n    },\n    actionLog: [`Game started. Agent at (${agentPos.x + 1},${agentPos.y + 1})`, `Wumpus at (${wumpusPos.x + 1},${wumpusPos.y + 1})`, `Gold at (${goldPos.x + 1},${goldPos.y + 1})`]\n  };\n}\nexport function createAgentState(agentPos) {\n  return {\n    stack: [agentPos],\n    visited: Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill(false)),\n    arrows: 3,\n    hasGold: false,\n    path: [agentPos],\n    autoMode: true\n  };\n}\n\n// Directions: up, right, down, left\nconst DIRS = [{\n  dx: 0,\n  dy: -1\n}, {\n  dx: 1,\n  dy: 0\n}, {\n  dx: 0,\n  dy: 1\n}, {\n  dx: -1,\n  dy: 0\n}];\nfunction isValid(x, y) {\n  return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\n// Helper: get adjacent cells\nfunction getAdjacent(x, y) {\n  return DIRS.map(({\n    dx,\n    dy\n  }) => ({\n    x: x + dx,\n    y: y + dy\n  })).filter(({\n    x,\n    y\n  }) => isValid(x, y));\n}\n\n// Helper: detect threats in adjacent cells\nfunction detectThreats(game, x, y) {\n  let dangerLevel = 0;\n  let adjWumpus = null;\n  let adjBats = 0,\n    adjPits = 0;\n  for (const {\n    x: nx,\n    y: ny\n  } of getAdjacent(x, y)) {\n    const t = game.board[ny][nx].type;\n    if (t === 'wumpus') {\n      dangerLevel += 50;\n      adjWumpus = {\n        x: nx,\n        y: ny\n      };\n    } else if (t === 'pit') {\n      dangerLevel += 20;\n      adjPits++;\n    } else if (t === 'bat') {\n      dangerLevel += 10;\n      adjBats++;\n    }\n  }\n  return {\n    dangerLevel,\n    adjWumpus,\n    adjBats,\n    adjPits\n  };\n}\nexport function agentStep(game) {\n  if (!game.agentState || game.status !== 'playing') return game;\n  const agent = game.agentState;\n  if (agent.stack.length === 0) {\n    if (game.status === 'playing') {\n      // Prevent duplicate loss message if already lost by pit/wumpus/gold\n      const lastLog = (game.actionLog || []).slice(-1)[0] || '';\n      if (/Lost!|WON!/i.test(lastLog)) {\n        return {\n          ...game,\n          status: 'lost',\n          actionLog: [...(game.actionLog || [])]\n        };\n      }\n      return {\n        ...game,\n        status: 'lost',\n        actionLog: [...(game.actionLog || []), 'Agent ran out of moves. Lost!']\n      };\n    } else {\n      return game;\n    }\n  }\n  const curr = agent.stack[agent.stack.length - 1];\n  agent.visited[curr.y][curr.x] = true;\n  game.explored[curr.y][curr.x] = true;\n  let log = game.actionLog ? [...game.actionLog] : [];\n  log.push(`Agent moved to (${curr.x + 1},${curr.y + 1})`);\n  // Update agentPos for UI\n  game.agentPos = {\n    x: curr.x,\n    y: curr.y\n  };\n  // Mark explored\n  game.explored[curr.y][curr.x] = true;\n\n  // Check for gold\n  if (curr.x === game.goldPos.x && curr.y === game.goldPos.y && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'won',\n      actionLog: log\n    };\n  }\n  // Check for threats (gold, pit, wumpus, bat) by cell type\n  const cell = game.board[curr.y][curr.x];\n  if (cell.type === 'gold' && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'won',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'pit') {\n    log.push('Agent fell into a pit at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'lost',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'wumpus') {\n    log.push('Agent encountered the Wumpus at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'lost',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'bat') {\n    // Bat: teleport, reset stack but keep visited and known dangers\n    const empty = [];\n    for (let y = 0; y < BOARD_SIZE; y++) for (let x = 0; x < BOARD_SIZE; x++) if (game.board[y][x].type === 'empty' && !agent.visited[y][x]) empty.push({\n      x,\n      y\n    });\n    if (empty.length > 0) {\n      const idx = Math.floor(Math.random() * empty.length);\n      agent.stack = [empty[idx]];\n      agent.path = [empty[idx]];\n      log.push(`Agent was carried by bats from (${curr.x + 1},${curr.y + 1}) to (${empty[idx].x + 1},${empty[idx].y + 1})! Exploration history reset, known dangers kept.`);\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n  // Detect adjacent threats and log sensory messages\n  const {\n    dangerLevel,\n    adjWumpus,\n    adjBats,\n    adjPits\n  } = detectThreats(game, curr.x, curr.y);\n  if (adjWumpus) log.push('You smell something terrible nearby.');\n  if (adjPits) log.push('You feel a breeze nearby.');\n  if (adjBats) log.push('You hear flapping nearby.');\n\n  // Wumpus shooting logic: shoot if adjacent and has arrows\n  if (adjWumpus) {\n    if (agent.arrows > 0 && !agent.justShot) {\n      agent.arrows--;\n      agent.justShot = true;\n      const hit = Math.random() < 0.125;\n      log.push(`Agent senses the Wumpus nearby and shoots. Arrows left: ${agent.arrows}`);\n      if (hit) {\n        game.board[adjWumpus.y][adjWumpus.x].type = 'empty';\n        log.push('Agent killed the Wumpus! WON!');\n        return {\n          ...game,\n          status: 'won',\n          actionLog: log\n        };\n      } else {\n        log.push('Agent missed the Wumpus and continues exploring.');\n        // Do not backtrack, just continue\n        // Remove justShot flag for next move\n        return {\n          ...game,\n          actionLog: log\n        };\n      }\n    } else if (agent.arrows === 0) {\n      log.push('Agent senses the Wumpus nearby but has no arrows left. Must continue exploring.');\n      // Remove justShot flag for next move\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n  // Remove justShot flag for next move\n  if (agent.justShot) agent.justShot = false;\n\n  // Pit adjacent: backtrack if adjacent to a pit\n  if (adjPits > 0) {\n    log.push('Agent senses a pit nearby and backtracks.');\n    agent.stack.pop();\n    return {\n      ...game,\n      actionLog: log\n    };\n  }\n  // Bat adjacent: risk once, but avoid in the future\n  if (adjBats > 0) {\n    log.push('Agent hears bats nearby, will risk once.');\n    // Continue, but could add logic to avoid in future\n  }\n  // DFS: explore unexplored neighbors\n  const neighbors = getAdjacent(curr.x, curr.y);\n  for (const n of neighbors) {\n    if (!agent.visited[n.y][n.x]) {\n      agent.stack.push(n);\n      agent.path.push(n);\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n  // If all explored, backtrack\n  log.push('All options explored, backtracking.');\n  agent.stack.pop();\n  return {\n    ...game,\n    actionLog: log\n  };\n}","map":{"version":3,"names":["BOARD_SIZE","NUM_BATS","NUM_PITS","getRandomEmptyCell","occupied","x","y","Math","floor","random","has","add","createNewGame","Set","agentPos","wumpusPos","goldPos","batPositions","Array","from","length","pitPositions","board","_","type","explored","forEach","fill","status","stats","games","victories","actionLog","createAgentState","stack","visited","arrows","hasGold","path","autoMode","DIRS","dx","dy","isValid","getAdjacent","map","filter","detectThreats","game","dangerLevel","adjWumpus","adjBats","adjPits","nx","ny","t","agentStep","agentState","agent","lastLog","slice","test","curr","log","push","newExplored","row","j","val","i","cell","empty","idx","justShot","hit","pop","neighbors","n"],"sources":["/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/utils/gameLogic.ts"],"sourcesContent":["import { GameState, Cell, CellType, AgentState } from './gameTypes';\n\nconst BOARD_SIZE = 20;\nconst NUM_BATS = 8;\nconst NUM_PITS = 4;\n\nfunction getRandomEmptyCell(occupied: Set<string>): { x: number; y: number } {\n  let x, y;\n  do {\n    x = Math.floor(Math.random() * BOARD_SIZE);\n    y = Math.floor(Math.random() * BOARD_SIZE);\n  } while (occupied.has(`${x},${y}`));\n  occupied.add(`${x},${y}`);\n  return { x, y };\n}\n\nexport function createNewGame(): GameState {\n  const occupied = new Set<string>();\n  // Place agent\n  const agentPos = getRandomEmptyCell(occupied);\n  // Place wumpus\n  const wumpusPos = getRandomEmptyCell(occupied);\n  // Place gold\n  const goldPos = getRandomEmptyCell(occupied);\n  // Place bats\n  const batPositions = Array.from({ length: NUM_BATS }, () => getRandomEmptyCell(occupied));\n  // Place pits\n  const pitPositions = Array.from({ length: NUM_PITS }, () => getRandomEmptyCell(occupied));\n\n  // Build board\n  const board: Cell[][] = Array.from({ length: BOARD_SIZE }, (_, y) =>\n    Array.from({ length: BOARD_SIZE }, (_, x) => ({ type: 'empty', explored: false }))\n  );\n  board[agentPos.y][agentPos.x] = { type: 'agent', explored: true };\n  board[wumpusPos.y][wumpusPos.x] = { type: 'wumpus', explored: false };\n  board[goldPos.y][goldPos.x] = { type: 'gold', explored: false };\n  batPositions.forEach(({ x, y }) => (board[y][x] = { type: 'bat', explored: false }));\n  pitPositions.forEach(({ x, y }) => (board[y][x] = { type: 'pit', explored: false }));\n\n  return {\n    board,\n    agentPos,\n    wumpusPos,\n    goldPos,\n    batPositions,\n    pitPositions,\n    explored: Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(false)),\n    status: 'playing',\n    stats: { games: 1, victories: 0 },\n    actionLog: [\n      `Game started. Agent at (${agentPos.x + 1},${agentPos.y + 1})`,\n      `Wumpus at (${wumpusPos.x + 1},${wumpusPos.y + 1})`,\n      `Gold at (${goldPos.x + 1},${goldPos.y + 1})`,\n    ],\n  };\n}\n\nexport function createAgentState(agentPos: { x: number; y: number }): AgentState {\n  return {\n    stack: [agentPos],\n    visited: Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(false)),\n    arrows: 3,\n    hasGold: false,\n    path: [agentPos],\n    autoMode: true,\n  };\n}\n\n// Directions: up, right, down, left\nconst DIRS = [\n  { dx: 0, dy: -1 },\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: 1 },\n  { dx: -1, dy: 0 },\n];\n\nfunction isValid(x: number, y: number) {\n  return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\n// Helper: get adjacent cells\nfunction getAdjacent(x: number, y: number) {\n  return DIRS\n    .map(({ dx, dy }) => ({ x: x + dx, y: y + dy }))\n    .filter(({ x, y }) => isValid(x, y));\n}\n\n// Helper: detect threats in adjacent cells\nfunction detectThreats(game: GameState, x: number, y: number) {\n  let dangerLevel = 0;\n  let adjWumpus: { x: number; y: number } | null = null;\n  let adjBats = 0, adjPits = 0;\n  for (const { x: nx, y: ny } of getAdjacent(x, y)) {\n    const t = game.board[ny][nx].type;\n    if (t === 'wumpus') {\n      dangerLevel += 50;\n      adjWumpus = { x: nx, y: ny };\n    } else if (t === 'pit') {\n      dangerLevel += 20;\n      adjPits++;\n    } else if (t === 'bat') {\n      dangerLevel += 10;\n      adjBats++;\n    }\n  }\n  return { dangerLevel, adjWumpus, adjBats, adjPits };\n}\n\nexport function agentStep(game: GameState): GameState {\n  if (!game.agentState || game.status !== 'playing') return game;\n  const agent = game.agentState;\n  if (agent.stack.length === 0) {\n    if (game.status === 'playing') {\n      // Prevent duplicate loss message if already lost by pit/wumpus/gold\n      const lastLog = (game.actionLog || []).slice(-1)[0] || '';\n      if (/Lost!|WON!/i.test(lastLog)) {\n        return { ...game, status: 'lost', actionLog: [...(game.actionLog || [])] };\n      }\n      return { ...game, status: 'lost', actionLog: [...(game.actionLog || []), 'Agent ran out of moves. Lost!'] };\n    } else {\n      return game;\n    }\n  }\n  const curr = agent.stack[agent.stack.length - 1];\n  agent.visited[curr.y][curr.x] = true;\n  game.explored[curr.y][curr.x] = true;\n  let log = game.actionLog ? [...game.actionLog] : [];\n  log.push(`Agent moved to (${curr.x + 1},${curr.y + 1})`);\n  // Update agentPos for UI\n  game.agentPos = { x: curr.x, y: curr.y };\n  // Mark explored\n  game.explored[curr.y][curr.x] = true;\n\n  // Check for gold\n  if (curr.x === game.goldPos.x && curr.y === game.goldPos.y && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'won', actionLog: log };\n  }\n  // Check for threats (gold, pit, wumpus, bat) by cell type\n  const cell = game.board[curr.y][curr.x];\n  if (cell.type === 'gold' && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'won', actionLog: log };\n  }\n  if (cell.type === 'pit') {\n    log.push('Agent fell into a pit at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'lost', actionLog: log };\n  }\n  if (cell.type === 'wumpus') {\n    log.push('Agent encountered the Wumpus at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'lost', actionLog: log };\n  }\n  if (cell.type === 'bat') {\n    // Bat: teleport, reset stack but keep visited and known dangers\n    const empty: { x: number; y: number }[] = [];\n    for (let y = 0; y < BOARD_SIZE; y++) for (let x = 0; x < BOARD_SIZE; x++)\n      if (game.board[y][x].type === 'empty' && !agent.visited[y][x]) empty.push({ x, y });\n    if (empty.length > 0) {\n      const idx = Math.floor(Math.random() * empty.length);\n      agent.stack = [empty[idx]];\n      agent.path = [empty[idx]];\n      log.push(`Agent was carried by bats from (${curr.x + 1},${curr.y + 1}) to (${empty[idx].x + 1},${empty[idx].y + 1})! Exploration history reset, known dangers kept.`);\n      return { ...game, actionLog: log };\n    }\n  }\n  // Detect adjacent threats and log sensory messages\n  const { dangerLevel, adjWumpus, adjBats, adjPits } = detectThreats(game, curr.x, curr.y);\n  if (adjWumpus) log.push('You smell something terrible nearby.');\n  if (adjPits) log.push('You feel a breeze nearby.');\n  if (adjBats) log.push('You hear flapping nearby.');\n\n  // Wumpus shooting logic: shoot if adjacent and has arrows\n  if (adjWumpus) {\n    if (agent.arrows > 0 && !agent.justShot) {\n      agent.arrows--;\n      agent.justShot = true;\n      const hit = Math.random() < 0.125;\n      log.push(`Agent senses the Wumpus nearby and shoots. Arrows left: ${agent.arrows}`);\n      if (hit) {\n        game.board[adjWumpus.y][adjWumpus.x].type = 'empty';\n        log.push('Agent killed the Wumpus! WON!');\n        return { ...game, status: 'won', actionLog: log };\n      } else {\n        log.push('Agent missed the Wumpus and continues exploring.');\n        // Do not backtrack, just continue\n        // Remove justShot flag for next move\n        return { ...game, actionLog: log };\n      }\n    } else if (agent.arrows === 0) {\n      log.push('Agent senses the Wumpus nearby but has no arrows left. Must continue exploring.');\n      // Remove justShot flag for next move\n      return { ...game, actionLog: log };\n    }\n  }\n  // Remove justShot flag for next move\n  if (agent.justShot) agent.justShot = false;\n\n  // Pit adjacent: backtrack if adjacent to a pit\n  if (adjPits > 0) {\n    log.push('Agent senses a pit nearby and backtracks.');\n    agent.stack.pop();\n    return { ...game, actionLog: log };\n  }\n  // Bat adjacent: risk once, but avoid in the future\n  if (adjBats > 0) {\n    log.push('Agent hears bats nearby, will risk once.');\n    // Continue, but could add logic to avoid in future\n  }\n  // DFS: explore unexplored neighbors\n  const neighbors = getAdjacent(curr.x, curr.y);\n  for (const n of neighbors) {\n    if (!agent.visited[n.y][n.x]) {\n      agent.stack.push(n);\n      agent.path.push(n);\n      return { ...game, actionLog: log };\n    }\n  }\n  // If all explored, backtrack\n  log.push('All options explored, backtracking.');\n  agent.stack.pop();\n  return { ...game, actionLog: log };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}