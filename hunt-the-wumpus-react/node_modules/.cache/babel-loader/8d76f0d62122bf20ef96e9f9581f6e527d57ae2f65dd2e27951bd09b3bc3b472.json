{"ast":null,"code":"const BOARD_SIZE = 20;\nconst NUM_BATS = 1;\nconst NUM_PITS = 4;\nfunction getRandomEmptyCell(occupied) {\n  let x, y;\n  do {\n    x = Math.floor(Math.random() * BOARD_SIZE);\n    y = Math.floor(Math.random() * BOARD_SIZE);\n  } while (occupied.has(`${x},${y}`));\n  occupied.add(`${x},${y}`);\n  return {\n    x,\n    y\n  };\n}\nexport function createNewGame() {\n  const occupied = new Set();\n  // Place agent\n  const agentPos = getRandomEmptyCell(occupied);\n  // Place wumpus\n  const wumpusPos = getRandomEmptyCell(occupied);\n  // Place gold\n  const goldPos = getRandomEmptyCell(occupied);\n  // Place bats\n  const batPositions = Array.from({\n    length: NUM_BATS\n  }, () => getRandomEmptyCell(occupied));\n  // Place pits\n  const pitPositions = Array.from({\n    length: NUM_PITS\n  }, () => getRandomEmptyCell(occupied));\n\n  // Build board\n  const board = Array.from({\n    length: BOARD_SIZE\n  }, (_, y) => Array.from({\n    length: BOARD_SIZE\n  }, (_, x) => ({\n    type: 'empty',\n    explored: false\n  })));\n  board[wumpusPos.y][wumpusPos.x] = {\n    type: 'wumpus',\n    explored: false\n  };\n  board[goldPos.y][goldPos.x] = {\n    type: 'gold',\n    explored: false\n  };\n  batPositions.forEach(({\n    x,\n    y\n  }) => board[y][x] = {\n    type: 'bat',\n    explored: false\n  });\n  pitPositions.forEach(({\n    x,\n    y\n  }) => board[y][x] = {\n    type: 'pit',\n    explored: false\n  });\n  return {\n    board,\n    agentPos,\n    wumpusPos,\n    goldPos,\n    batPositions,\n    pitPositions,\n    explored: Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill(false)),\n    status: 'playing',\n    stats: {\n      games: 1,\n      victories: 0\n    },\n    actionLog: [`Game started. Agent at (${agentPos.x + 1},${agentPos.y + 1})`, `Wumpus at (${wumpusPos.x + 1},${wumpusPos.y + 1})`, `Gold at (${goldPos.x + 1},${goldPos.y + 1})`]\n  };\n}\nexport function createAgentState(agentPos) {\n  return {\n    stack: [agentPos],\n    visited: Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill(false)),\n    arrows: 3,\n    hasGold: false,\n    path: [agentPos],\n    autoMode: true\n  };\n}\n\n// Directions: up, right, down, left\nconst DIRS = [{\n  dx: 0,\n  dy: -1\n},\n// up\n{\n  dx: 1,\n  dy: 0\n},\n// right\n{\n  dx: 0,\n  dy: 1\n},\n// down\n{\n  dx: -1,\n  dy: 0\n} // left\n];\n\n// Helper: shuffle an array in-place\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// Helper: get adjacent cells in random order\nfunction getAdjacent(x, y) {\n  const dirs = shuffle([...DIRS]);\n  return dirs.map(({\n    dx,\n    dy\n  }) => ({\n    x: x + dx,\n    y: y + dy\n  })).filter(({\n    x,\n    y\n  }) => isValid(x, y));\n}\nfunction isValid(x, y) {\n  return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\n// Helper: detect threats in adjacent cells\nfunction detectThreats(game, x, y) {\n  let dangerLevel = 0;\n  let adjWumpus = null;\n  let adjBats = 0,\n    adjPits = 0;\n  for (const {\n    x: nx,\n    y: ny\n  } of getAdjacent(x, y)) {\n    const t = game.board[ny][nx].type;\n    if (t === 'wumpus') {\n      dangerLevel += 50;\n      adjWumpus = {\n        x: nx,\n        y: ny\n      };\n    } else if (t === 'pit') {\n      dangerLevel += 10;\n      adjPits++;\n    } else if (t === 'bat') {\n      dangerLevel += 10;\n      adjBats++;\n    }\n  }\n  return {\n    dangerLevel,\n    adjWumpus,\n    adjBats,\n    adjPits\n  };\n}\nexport function agentStep(game) {\n  if (!game.agentState || game.status !== 'playing') return game;\n  const agent = game.agentState;\n\n  // Get current position\n  const curr = agent.stack.length > 0 ? agent.stack[agent.stack.length - 1] : game.agentPos;\n  let log = game.actionLog ? [...game.actionLog] : [];\n\n  // Mark current as visited\n  agent.visited[curr.y][curr.x] = true;\n  game.explored[curr.y][curr.x] = true;\n  game.agentPos = {\n    x: curr.x,\n    y: curr.y\n  };\n  log.push(`Agent moved to (${curr.x + 1},${curr.y + 1})`);\n\n  // Check for threats at current cell\n  const cell = game.board[curr.y][curr.x];\n  if (cell.type === 'gold' && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      status: 'won',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'pit') {\n    log.push('Agent fell into a pit at this cell. Lost!');\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      status: 'lost',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'wumpus') {\n    log.push('Agent encountered the Wumpus at this cell. Lost!');\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      status: 'lost',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'bat') {\n    // Bat: teleport, reset stack but keep visited and known dangers\n    const empty = [];\n    for (let y = 0; y < BOARD_SIZE; y++) for (let x = 0; x < BOARD_SIZE; x++) if (game.board[y][x].type === 'empty' && !agent.visited[y][x]) empty.push({\n      x,\n      y\n    });\n    if (empty.length > 0) {\n      const idx = Math.floor(Math.random() * empty.length);\n      agent.stack = [empty[idx]];\n      agent.path = [empty[idx]];\n      log.push(`Agent was carried by bats from (${curr.x + 1},${curr.y + 1}) to (${empty[idx].x + 1},${empty[idx].y + 1})! Exploration history reset, known dangers kept.`);\n      game.agentPos = {\n        x: empty[idx].x,\n        y: empty[idx].y\n      };\n      // After teleport, check for threats at new cell\n      const newCell = game.board[empty[idx].y][empty[idx].x];\n      if (newCell.type === 'gold' && !agent.hasGold) {\n        agent.hasGold = true;\n        log.push('Agent found the gold! WON!');\n        return {\n          ...game,\n          agentPos: {\n            x: empty[idx].x,\n            y: empty[idx].y\n          },\n          status: 'won',\n          actionLog: log\n        };\n      }\n      if (newCell.type === 'pit') {\n        log.push('Agent fell into a pit at this cell. Lost!');\n        return {\n          ...game,\n          agentPos: {\n            x: empty[idx].x,\n            y: empty[idx].y\n          },\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      if (newCell.type === 'wumpus') {\n        log.push('Agent encountered the Wumpus at this cell. Lost!');\n        return {\n          ...game,\n          agentPos: {\n            x: empty[idx].x,\n            y: empty[idx].y\n          },\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n\n  // Get neighbors (DFS order, random)\n  const neighbors = shuffle(getAdjacent(curr.x, curr.y));\n  // Find unvisited, non-dangerous neighbor\n  let found = false;\n  for (const n of neighbors) {\n    if (!agent.visited[n.y][n.x]) {\n      agent.stack.push(n);\n      found = true;\n      break;\n    }\n  }\n  // If no unvisited neighbor, backtrack\n  if (!found) {\n    agent.stack.pop();\n    log.push('All options explored, backtracking.');\n  }\n  return {\n    ...game,\n    actionLog: log\n  };\n}","map":{"version":3,"names":["BOARD_SIZE","NUM_BATS","NUM_PITS","getRandomEmptyCell","occupied","x","y","Math","floor","random","has","add","createNewGame","Set","agentPos","wumpusPos","goldPos","batPositions","Array","from","length","pitPositions","board","_","type","explored","forEach","fill","status","stats","games","victories","actionLog","createAgentState","stack","visited","arrows","hasGold","path","autoMode","DIRS","dx","dy","shuffle","array","i","j","getAdjacent","dirs","map","filter","isValid","detectThreats","game","dangerLevel","adjWumpus","adjBats","adjPits","nx","ny","t","agentStep","agentState","agent","curr","log","push","cell","empty","idx","newCell","neighbors","found","n","pop"],"sources":["/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/utils/gameLogic.ts"],"sourcesContent":["import { GameState, Cell, CellType, AgentState } from './gameTypes';\n\nconst BOARD_SIZE = 20;\nconst NUM_BATS = 1;\nconst NUM_PITS = 4;\n\nfunction getRandomEmptyCell(occupied: Set<string>): { x: number; y: number } {\n  let x, y;\n  do {\n    x = Math.floor(Math.random() * BOARD_SIZE);\n    y = Math.floor(Math.random() * BOARD_SIZE);\n  } while (occupied.has(`${x},${y}`));\n  occupied.add(`${x},${y}`);\n  return { x, y };\n}\n\nexport function createNewGame(): GameState {\n  const occupied = new Set<string>();\n  // Place agent\n  const agentPos = getRandomEmptyCell(occupied);\n  // Place wumpus\n  const wumpusPos = getRandomEmptyCell(occupied);\n  // Place gold\n  const goldPos = getRandomEmptyCell(occupied);\n  // Place bats\n  const batPositions = Array.from({ length: NUM_BATS }, () => getRandomEmptyCell(occupied));\n  // Place pits\n  const pitPositions = Array.from({ length: NUM_PITS }, () => getRandomEmptyCell(occupied));\n\n  // Build board\n  const board: Cell[][] = Array.from({ length: BOARD_SIZE }, (_, y) =>\n    Array.from({ length: BOARD_SIZE }, (_, x) => ({ type: 'empty', explored: false }))\n  );\n  board[wumpusPos.y][wumpusPos.x] = { type: 'wumpus', explored: false };\n  board[goldPos.y][goldPos.x] = { type: 'gold', explored: false };\n  batPositions.forEach(({ x, y }) => (board[y][x] = { type: 'bat', explored: false }));\n  pitPositions.forEach(({ x, y }) => (board[y][x] = { type: 'pit', explored: false }));\n\n  return {\n    board,\n    agentPos,\n    wumpusPos,\n    goldPos,\n    batPositions,\n    pitPositions,\n    explored: Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(false)),\n    status: 'playing',\n    stats: { games: 1, victories: 0 },\n    actionLog: [\n      `Game started. Agent at (${agentPos.x + 1},${agentPos.y + 1})`,\n      `Wumpus at (${wumpusPos.x + 1},${wumpusPos.y + 1})`,\n      `Gold at (${goldPos.x + 1},${goldPos.y + 1})`,\n    ],\n  };\n}\n\nexport function createAgentState(agentPos: { x: number; y: number }): AgentState {\n  return {\n    stack: [agentPos],\n    visited: Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(false)),\n    arrows: 3,\n    hasGold: false,\n    path: [agentPos],\n    autoMode: true,\n  };\n}\n\n// Directions: up, right, down, left\nconst DIRS = [\n  { dx: 0, dy: -1 },  // up\n  { dx: 1, dy: 0 },   // right\n  { dx: 0, dy: 1 },   // down\n  { dx: -1, dy: 0 },  // left\n];\n\n// Helper: shuffle an array in-place\nfunction shuffle<T>(array: T[]): T[] {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// Helper: get adjacent cells in random order\nfunction getAdjacent(x: number, y: number) {\n  const dirs = shuffle([...DIRS]);\n  return dirs\n    .map(({ dx, dy }) => ({ x: x + dx, y: y + dy }))\n    .filter(({ x, y }) => isValid(x, y));\n}\n\nfunction isValid(x: number, y: number) {\n  return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\n// Helper: detect threats in adjacent cells\nfunction detectThreats(game: GameState, x: number, y: number) {\n  let dangerLevel = 0;\n  let adjWumpus: { x: number; y: number } | null = null;\n  let adjBats = 0, adjPits = 0;\n  for (const { x: nx, y: ny } of getAdjacent(x, y)) {\n    const t = game.board[ny][nx].type;\n    if (t === 'wumpus') {\n      dangerLevel += 50;\n      adjWumpus = { x: nx, y: ny };\n    } else if (t === 'pit') {\n      dangerLevel += 10;\n      adjPits++;\n    } else if (t === 'bat') {\n      dangerLevel += 10;\n      adjBats++;\n    }\n  }\n  return { dangerLevel, adjWumpus, adjBats, adjPits };\n}\n\nexport function agentStep(game: GameState): GameState {\n  if (!game.agentState || game.status !== 'playing') return game;\n  const agent = game.agentState;\n\n  // Get current position\n  const curr = agent.stack.length > 0 ? agent.stack[agent.stack.length - 1] : game.agentPos;\n  let log = game.actionLog ? [...game.actionLog] : [];\n\n  // Mark current as visited\n  agent.visited[curr.y][curr.x] = true;\n  game.explored[curr.y][curr.x] = true;\n  game.agentPos = { x: curr.x, y: curr.y };\n  log.push(`Agent moved to (${curr.x + 1},${curr.y + 1})`);\n\n  // Check for threats at current cell\n  const cell = game.board[curr.y][curr.x];\n  if (cell.type === 'gold' && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, status: 'won', actionLog: log };\n  }\n  if (cell.type === 'pit') {\n    log.push('Agent fell into a pit at this cell. Lost!');\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, status: 'lost', actionLog: log };\n  }\n  if (cell.type === 'wumpus') {\n    log.push('Agent encountered the Wumpus at this cell. Lost!');\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, status: 'lost', actionLog: log };\n  }\n  if (cell.type === 'bat') {\n    // Bat: teleport, reset stack but keep visited and known dangers\n    const empty: { x: number; y: number }[] = [];\n    for (let y = 0; y < BOARD_SIZE; y++) for (let x = 0; x < BOARD_SIZE; x++)\n      if (game.board[y][x].type === 'empty' && !agent.visited[y][x]) empty.push({ x, y });\n    if (empty.length > 0) {\n      const idx = Math.floor(Math.random() * empty.length);\n      agent.stack = [empty[idx]];\n      agent.path = [empty[idx]];\n      log.push(`Agent was carried by bats from (${curr.x + 1},${curr.y + 1}) to (${empty[idx].x + 1},${empty[idx].y + 1})! Exploration history reset, known dangers kept.`);\n      game.agentPos = { x: empty[idx].x, y: empty[idx].y };\n      // After teleport, check for threats at new cell\n      const newCell = game.board[empty[idx].y][empty[idx].x];\n      if (newCell.type === 'gold' && !agent.hasGold) {\n        agent.hasGold = true;\n        log.push('Agent found the gold! WON!');\n        return { ...game, agentPos: { x: empty[idx].x, y: empty[idx].y }, status: 'won', actionLog: log };\n      }\n      if (newCell.type === 'pit') {\n        log.push('Agent fell into a pit at this cell. Lost!');\n        return { ...game, agentPos: { x: empty[idx].x, y: empty[idx].y }, status: 'lost', actionLog: log };\n      }\n      if (newCell.type === 'wumpus') {\n        log.push('Agent encountered the Wumpus at this cell. Lost!');\n        return { ...game, agentPos: { x: empty[idx].x, y: empty[idx].y }, status: 'lost', actionLog: log };\n      }\n      return { ...game, actionLog: log };\n    }\n  }\n\n  // Get neighbors (DFS order, random)\n  const neighbors = shuffle(getAdjacent(curr.x, curr.y));\n  // Find unvisited, non-dangerous neighbor\n  let found = false;\n  for (const n of neighbors) {\n    if (!agent.visited[n.y][n.x]) {\n      agent.stack.push(n);\n      found = true;\n      break;\n    }\n  }\n  // If no unvisited neighbor, backtrack\n  if (!found) {\n    agent.stack.pop();\n    log.push('All options explored, backtracking.');\n  }\n  return { ...game, actionLog: log };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}