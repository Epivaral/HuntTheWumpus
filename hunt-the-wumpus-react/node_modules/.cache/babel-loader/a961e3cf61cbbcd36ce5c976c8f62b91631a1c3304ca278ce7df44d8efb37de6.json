{"ast":null,"code":"var _jsxFileName = \"/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/components/Board.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Cell from './Cell';\nimport { createNewGame } from '../utils/gameLogic';\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 20;\nconst Board = () => {\n  _s();\n  // For now, just create a new game on mount\n  const [game, setGame] = React.useState(() => createNewGame());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: game.board.map((row, y) => row.map((cell, x) => /*#__PURE__*/_jsxDEV(Cell, {\n      type: cell.type,\n      explored: cell.explored\n    }, `${x},${y}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 30\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"t+IFa/MFmNpcjQCxVQHVjy9C9HI=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","Cell","createNewGame","jsxDEV","_jsxDEV","BOARD_SIZE","Board","_s","game","setGame","useState","className","children","board","map","row","y","cell","x","type","explored","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/components/Board.tsx"],"sourcesContent":["import React from 'react';\nimport Cell from './Cell';\nimport { createNewGame } from '../utils/gameLogic';\nimport { GameState } from '../utils/gameTypes';\nimport './Board.css';\n\nconst BOARD_SIZE = 20;\n\nconst Board: React.FC = () => {\n  // For now, just create a new game on mount\n  const [game, setGame] = React.useState<GameState>(() => createNewGame());\n\n  return (\n    <div className=\"board\">\n      {game.board.map((row, y) =>\n        row.map((cell, x) => <Cell key={`${x},${y}`} type={cell.type} explored={cell.explored} />)\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,aAAa,QAAQ,oBAAoB;AAElD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,UAAU,GAAG,EAAE;AAErB,MAAMC,KAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,KAAK,CAACU,QAAQ,CAAY,MAAMR,aAAa,CAAC,CAAC,CAAC;EAExE,oBACEE,OAAA;IAAKO,SAAS,EAAC,OAAO;IAAAC,QAAA,EACnBJ,IAAI,CAACK,KAAK,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KACrBD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,CAAC,kBAAKd,OAAA,CAACH,IAAI;MAAmBkB,IAAI,EAAEF,IAAI,CAACE,IAAK;MAACC,QAAQ,EAAEH,IAAI,CAACG;IAAS,GAAtD,GAAGF,CAAC,IAAIF,CAAC,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA6C,CAAC,CAC3F;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CAXID,KAAe;AAAAmB,EAAA,GAAfnB,KAAe;AAarB,eAAeA,KAAK;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}