{"ast":null,"code":"const BOARD_SIZE = 20;\nconst NUM_BATS = 1;\nconst NUM_PITS = 4;\nfunction getRandomEmptyCell(occupied) {\n  let x, y;\n  do {\n    x = Math.floor(Math.random() * BOARD_SIZE);\n    y = Math.floor(Math.random() * BOARD_SIZE);\n  } while (occupied.has(`${x},${y}`));\n  occupied.add(`${x},${y}`);\n  return {\n    x,\n    y\n  };\n}\nexport function createNewGame() {\n  const occupied = new Set();\n  // Place agent\n  const agentPos = getRandomEmptyCell(occupied);\n  // Place wumpus\n  const wumpusPos = getRandomEmptyCell(occupied);\n  // Place gold\n  const goldPos = getRandomEmptyCell(occupied);\n  // Place bats\n  const batPositions = Array.from({\n    length: NUM_BATS\n  }, () => getRandomEmptyCell(occupied));\n  // Place pits\n  const pitPositions = Array.from({\n    length: NUM_PITS\n  }, () => getRandomEmptyCell(occupied));\n\n  // Build board\n  const board = Array.from({\n    length: BOARD_SIZE\n  }, (_, y) => Array.from({\n    length: BOARD_SIZE\n  }, (_, x) => ({\n    type: 'empty',\n    explored: false\n  })));\n  board[wumpusPos.y][wumpusPos.x] = {\n    type: 'wumpus',\n    explored: false\n  };\n  board[goldPos.y][goldPos.x] = {\n    type: 'gold',\n    explored: false\n  };\n  batPositions.forEach(({\n    x,\n    y\n  }) => board[y][x] = {\n    type: 'bat',\n    explored: false\n  });\n  pitPositions.forEach(({\n    x,\n    y\n  }) => board[y][x] = {\n    type: 'pit',\n    explored: false\n  });\n  return {\n    board,\n    agentPos,\n    wumpusPos,\n    goldPos,\n    batPositions,\n    pitPositions,\n    explored: Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill(false)),\n    status: 'playing',\n    stats: {\n      games: 1,\n      victories: 0\n    },\n    actionLog: [`Game started. Agent at (${agentPos.x + 1},${agentPos.y + 1})`, `Wumpus at (${wumpusPos.x + 1},${wumpusPos.y + 1})`, `Gold at (${goldPos.x + 1},${goldPos.y + 1})`]\n  };\n}\nexport function createAgentState(agentPos) {\n  return {\n    stack: [agentPos],\n    visited: Array.from({\n      length: BOARD_SIZE\n    }, () => Array(BOARD_SIZE).fill(false)),\n    arrows: 3,\n    hasGold: false,\n    path: [agentPos],\n    autoMode: true\n  };\n}\n\n// Directions: up, right, down, left\nconst DIRS = [{\n  dx: 0,\n  dy: -1\n},\n// up\n{\n  dx: 1,\n  dy: 0\n},\n// right\n{\n  dx: 0,\n  dy: 1\n},\n// down\n{\n  dx: -1,\n  dy: 0\n} // left\n];\n\n// Helper: shuffle an array in-place\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// Helper: get adjacent cells in random order\nfunction getAdjacent(x, y) {\n  const dirs = shuffle([...DIRS]);\n  return dirs.map(({\n    dx,\n    dy\n  }) => ({\n    x: x + dx,\n    y: y + dy\n  })).filter(({\n    x,\n    y\n  }) => isValid(x, y));\n}\nfunction isValid(x, y) {\n  return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\n// Helper: detect threats in adjacent cells\nfunction detectThreats(game, x, y) {\n  let dangerLevel = 0;\n  let adjWumpus = null;\n  let adjBats = 0,\n    adjPits = 0;\n  for (const {\n    x: nx,\n    y: ny\n  } of getAdjacent(x, y)) {\n    const t = game.board[ny][nx].type;\n    if (t === 'wumpus') {\n      dangerLevel += 50;\n      adjWumpus = {\n        x: nx,\n        y: ny\n      };\n    } else if (t === 'pit') {\n      dangerLevel += 10;\n      adjPits++;\n    } else if (t === 'bat') {\n      dangerLevel += 10;\n      adjBats++;\n    }\n  }\n  return {\n    dangerLevel,\n    adjWumpus,\n    adjBats,\n    adjPits\n  };\n}\nexport function agentStep(game) {\n  if (!game.agentState || game.status !== 'playing') return game;\n  const agent = game.agentState;\n\n  // Always get the current cell, even if stack is empty\n  const curr = agent.stack.length > 0 ? agent.stack[agent.stack.length - 1] : game.agentPos;\n  let log = game.actionLog ? [...game.actionLog] : [];\n\n  // Always update agentPos for UI and stats, even after teleport or backtrack\n  // --- MOVE VALIDATION: Ensure agent only moves to adjacent cells (except after bat teleport) ---\n  let illegalMove = false;\n  if (game.prevAgentPos) {\n    var _game$actionLog;\n    const dx = Math.abs(curr.x - game.prevAgentPos.x);\n    const dy = Math.abs(curr.y - game.prevAgentPos.y);\n    const isAdjacent = dx + dy === 1;\n    const isTeleport = game.actionLog && ((_game$actionLog = game.actionLog[game.actionLog.length - 1]) === null || _game$actionLog === void 0 ? void 0 : _game$actionLog.includes('bats'));\n    if (!isAdjacent && !isTeleport) {\n      log.push(`ILLEGAL MOVE DETECTED: Agent jumped from (${game.prevAgentPos.x + 1},${game.prevAgentPos.y + 1}) to (${curr.x + 1},${curr.y + 1})`);\n      illegalMove = true;\n    }\n  }\n  if (illegalMove) {\n    // Revert agent position to previous valid cell and do not update stack/path\n    game.agentPos = {\n      ...game.prevAgentPos\n    };\n    game.prevAgentPos = {\n      ...game.prevAgentPos\n    };\n    return {\n      ...game,\n      actionLog: log\n    };\n  }\n  game.prevAgentPos = {\n    x: curr.x,\n    y: curr.y\n  };\n  game.agentPos = {\n    x: curr.x,\n    y: curr.y\n  };\n\n  // Only log move if stack is not empty (i.e., a real move)\n  if (agent.stack.length > 0) {\n    agent.visited[curr.y][curr.x] = true;\n    game.explored[curr.y][curr.x] = true;\n    log.push(`Agent moved to (${curr.x + 1},${curr.y + 1})`);\n    // Mark explored\n    game.explored[curr.y][curr.x] = true;\n    // (No early return here)\n  }\n\n  // 1. Always check for threats (gold, pit, wumpus, bat) by cell type FIRST and return immediately if found\n  const cell = game.board[curr.y][curr.x];\n  if (cell.type === 'gold' && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'won',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'pit') {\n    log.push('Agent fell into a pit at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'lost',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'wumpus') {\n    log.push('Agent encountered the Wumpus at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) => row.map((val, i) => i === curr.x && j === curr.y ? true : val));\n    return {\n      ...game,\n      agentPos: {\n        x: curr.x,\n        y: curr.y\n      },\n      explored: newExplored,\n      status: 'lost',\n      actionLog: log\n    };\n  }\n  if (cell.type === 'bat') {\n    // Bat: teleport, reset stack but keep visited and known dangers\n    const empty = [];\n    for (let y = 0; y < BOARD_SIZE; y++) for (let x = 0; x < BOARD_SIZE; x++) if (game.board[y][x].type === 'empty' && !agent.visited[y][x]) empty.push({\n      x,\n      y\n    });\n    if (empty.length > 0) {\n      const idx = Math.floor(Math.random() * empty.length);\n      agent.stack = [empty[idx]];\n      agent.path = [empty[idx]];\n      log.push(`Agent was carried by bats from (${curr.x + 1},${curr.y + 1}) to (${empty[idx].x + 1},${empty[idx].y + 1})! Exploration history reset, known dangers kept.`);\n      // Update agentPos after teleport\n      game.agentPos = {\n        x: empty[idx].x,\n        y: empty[idx].y\n      };\n      // After teleport, check for gold/pit/wumpus at new cell\n      const newCell = game.board[empty[idx].y][empty[idx].x];\n      if (newCell.type === 'gold' && !agent.hasGold) {\n        agent.hasGold = true;\n        log.push('Agent found the gold! WON!');\n        const newExplored = game.explored.map((row, j) => row.map((val, i) => i === empty[idx].x && j === empty[idx].y ? true : val));\n        return {\n          ...game,\n          agentPos: {\n            x: empty[idx].x,\n            y: empty[idx].y\n          },\n          explored: newExplored,\n          status: 'won',\n          actionLog: log\n        };\n      }\n      if (newCell.type === 'pit') {\n        log.push('Agent fell into a pit at this cell. Lost!');\n        const newExplored = game.explored.map((row, j) => row.map((val, i) => i === empty[idx].x && j === empty[idx].y ? true : val));\n        return {\n          ...game,\n          agentPos: {\n            x: empty[idx].x,\n            y: empty[idx].y\n          },\n          explored: newExplored,\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      if (newCell.type === 'wumpus') {\n        log.push('Agent encountered the Wumpus at this cell. Lost!');\n        const newExplored = game.explored.map((row, j) => row.map((val, i) => i === empty[idx].x && j === empty[idx].y ? true : val));\n        return {\n          ...game,\n          agentPos: {\n            x: empty[idx].x,\n            y: empty[idx].y\n          },\n          explored: newExplored,\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n\n  // 2. If stack is empty after all checks, then agent truly ran out of moves\n  if (agent.stack.length === 0) {\n    if (game.status === 'playing') {\n      const lastLog = log.slice(-1)[0] || '';\n      if (/Lost!|WON!/i.test(lastLog)) {\n        return {\n          ...game,\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      return {\n        ...game,\n        status: 'lost',\n        actionLog: [...log, 'Agent ran out of moves. Lost!']\n      };\n    } else {\n      return game;\n    }\n  }\n\n  // 3. Detect adjacent threats and log sensory messages\n  const {\n    dangerLevel,\n    adjWumpus,\n    adjBats,\n    adjPits\n  } = detectThreats(game, curr.x, curr.y);\n  if (adjWumpus) log.push('You smell something terrible nearby.');\n  if (adjPits) log.push('You feel a breeze nearby.');\n  if (adjBats) log.push('You hear flapping nearby.');\n\n  // 4. Wumpus shooting logic: shoot if adjacent and has arrows\n  if (adjWumpus && agent.arrows > 0 && !agent.justShot) {\n    agent.arrows--;\n    agent.justShot = true;\n    const hit = Math.random() < 0.125;\n    log.push(`Agent senses the Wumpus nearby and shoots. Arrows left: ${agent.arrows}`);\n    if (hit) {\n      game.board[adjWumpus.y][adjWumpus.x].type = 'empty';\n      log.push('Agent killed the Wumpus! WON!');\n      return {\n        ...game,\n        status: 'won',\n        actionLog: log\n      };\n    } else {\n      log.push('Agent missed the Wumpus and continues exploring.');\n      // Do not return; allow agent to continue exploring after missing\n    }\n  } else if (adjWumpus && agent.arrows === 0) {\n    log.push('Agent senses the Wumpus nearby but has no arrows left. Must continue exploring.');\n    // Do not return; allow agent to continue exploring after logging\n  }\n  if (agent.justShot) agent.justShot = false;\n\n  // 5. Pit/backtrack logic\n  if (adjPits > 0) {\n    log.push('Agent senses a pit nearby and backtracks.');\n    agent.stack.pop();\n    return {\n      ...game,\n      actionLog: log\n    };\n  }\n  if (adjBats > 0) {\n    log.push('Agent hears bats nearby, will risk once.');\n  }\n  const neighbors = getAdjacent(curr.x, curr.y);\n  let hazardousNeighbor = null;\n  for (const n of neighbors) {\n    // Strict adjacency check before pushing any move\n    const dx = Math.abs(n.x - curr.x);\n    const dy = Math.abs(n.y - curr.y);\n    if (dx + dy !== 1) continue; // Only allow up/down/left/right\n    if (!agent.visited[n.y][n.x]) {\n      // --- WUMPUS LOOKAHEAD SHOOTING LOGIC ---\n      if (game.board[n.y][n.x].type === 'wumpus' && agent.arrows > 0) {\n        agent.arrows--;\n        agent.justShot = true;\n        const hit = Math.random() < 0.125;\n        log.push(`Agent sees the Wumpus ahead at (${n.x + 1},${n.y + 1}) and shoots. Arrows left: ${agent.arrows}`);\n        if (hit) {\n          game.board[n.y][n.x].type = 'empty';\n          log.push('Agent killed the Wumpus! WON!');\n          return {\n            ...game,\n            status: 'won',\n            actionLog: log\n          };\n        } else {\n          log.push('Agent missed the Wumpus and continues exploring.');\n          // Continue to next neighbor or move if no more arrows\n        }\n      } else if (game.board[n.y][n.x].type === 'wumpus' && agent.arrows === 0) {\n        log.push(`Agent sees the Wumpus ahead at (${n.x + 1},${n.y + 1}) but has no arrows left. Must risk moving.`);\n        // Continue to move into the Wumpus cell (will lose on next step)\n      }\n      // --- GOLD/PIT LOOKAHEAD LOGIC ---\n      if (game.board[n.y][n.x].type === 'gold' && !agent.hasGold) {\n        agent.hasGold = true;\n        log.push(`Agent sees gold ahead at (${n.x + 1},${n.y + 1}) and collects it! WON!`);\n        const newExplored = game.explored.map((row, j) => row.map((val, i) => i === n.x && j === n.y ? true : val));\n        game.agentPos = {\n          x: n.x,\n          y: n.y\n        }; // FIX: update agentPos after move\n        return {\n          ...game,\n          agentPos: {\n            x: n.x,\n            y: n.y\n          },\n          explored: newExplored,\n          status: 'won',\n          actionLog: log\n        };\n      }\n      // Instead of skipping pits, mark as hazardous and only avoid if other options exist\n      if (game.board[n.y][n.x].type === 'pit') {\n        log.push(`Agent sees a pit ahead at (${n.x + 1},${n.y + 1}) and marks it as hazardous.`);\n        if (!hazardousNeighbor) hazardousNeighbor = n;\n        agent.visited[n.y][n.x] = true; // Mark as visited to avoid unless forced\n        continue; // Try other options first\n      }\n      agent.stack.push(n);\n      agent.path.push(n);\n      game.agentPos = {\n        x: n.x,\n        y: n.y\n      }; // Ensure agentPos is updated immediately after move\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n  // If all options are visited, prefer hazardous (pit) cells before backtracking\n  if (hazardousNeighbor) {\n    // Strict adjacency check for hazardous move\n    const dx = Math.abs(hazardousNeighbor.x - curr.x);\n    const dy = Math.abs(hazardousNeighbor.y - curr.y);\n    if (dx + dy === 1) {\n      log.push(`Agent has no safe moves left and risks moving into pit at (${hazardousNeighbor.x + 1},${hazardousNeighbor.y + 1}).`);\n      agent.stack.push(hazardousNeighbor);\n      agent.path.push(hazardousNeighbor);\n      game.agentPos = {\n        x: hazardousNeighbor.x,\n        y: hazardousNeighbor.y\n      }; // Ensure agentPos is updated\n      return {\n        ...game,\n        actionLog: log\n      };\n    }\n  }\n  log.push('All options explored, backtracking.');\n  agent.stack.pop();\n  return {\n    ...game,\n    actionLog: log\n  };\n}","map":{"version":3,"names":["BOARD_SIZE","NUM_BATS","NUM_PITS","getRandomEmptyCell","occupied","x","y","Math","floor","random","has","add","createNewGame","Set","agentPos","wumpusPos","goldPos","batPositions","Array","from","length","pitPositions","board","_","type","explored","forEach","fill","status","stats","games","victories","actionLog","createAgentState","stack","visited","arrows","hasGold","path","autoMode","DIRS","dx","dy","shuffle","array","i","j","getAdjacent","dirs","map","filter","isValid","detectThreats","game","dangerLevel","adjWumpus","adjBats","adjPits","nx","ny","t","agentStep","agentState","agent","curr","log","illegalMove","prevAgentPos","_game$actionLog","abs","isAdjacent","isTeleport","includes","push","cell","newExplored","row","val","empty","idx","newCell","lastLog","slice","test","justShot","hit","pop","neighbors","hazardousNeighbor","n"],"sources":["/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/utils/gameLogic.ts"],"sourcesContent":["import { GameState, Cell, CellType, AgentState } from './gameTypes';\n\nconst BOARD_SIZE = 20;\nconst NUM_BATS = 1;\nconst NUM_PITS = 4;\n\nfunction getRandomEmptyCell(occupied: Set<string>): { x: number; y: number } {\n  let x, y;\n  do {\n    x = Math.floor(Math.random() * BOARD_SIZE);\n    y = Math.floor(Math.random() * BOARD_SIZE);\n  } while (occupied.has(`${x},${y}`));\n  occupied.add(`${x},${y}`);\n  return { x, y };\n}\n\nexport function createNewGame(): GameState {\n  const occupied = new Set<string>();\n  // Place agent\n  const agentPos = getRandomEmptyCell(occupied);\n  // Place wumpus\n  const wumpusPos = getRandomEmptyCell(occupied);\n  // Place gold\n  const goldPos = getRandomEmptyCell(occupied);\n  // Place bats\n  const batPositions = Array.from({ length: NUM_BATS }, () => getRandomEmptyCell(occupied));\n  // Place pits\n  const pitPositions = Array.from({ length: NUM_PITS }, () => getRandomEmptyCell(occupied));\n\n  // Build board\n  const board: Cell[][] = Array.from({ length: BOARD_SIZE }, (_, y) =>\n    Array.from({ length: BOARD_SIZE }, (_, x) => ({ type: 'empty', explored: false }))\n  );\n  board[wumpusPos.y][wumpusPos.x] = { type: 'wumpus', explored: false };\n  board[goldPos.y][goldPos.x] = { type: 'gold', explored: false };\n  batPositions.forEach(({ x, y }) => (board[y][x] = { type: 'bat', explored: false }));\n  pitPositions.forEach(({ x, y }) => (board[y][x] = { type: 'pit', explored: false }));\n\n  return {\n    board,\n    agentPos,\n    wumpusPos,\n    goldPos,\n    batPositions,\n    pitPositions,\n    explored: Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(false)),\n    status: 'playing',\n    stats: { games: 1, victories: 0 },\n    actionLog: [\n      `Game started. Agent at (${agentPos.x + 1},${agentPos.y + 1})`,\n      `Wumpus at (${wumpusPos.x + 1},${wumpusPos.y + 1})`,\n      `Gold at (${goldPos.x + 1},${goldPos.y + 1})`,\n    ],\n  };\n}\n\nexport function createAgentState(agentPos: { x: number; y: number }): AgentState {\n  return {\n    stack: [agentPos],\n    visited: Array.from({ length: BOARD_SIZE }, () => Array(BOARD_SIZE).fill(false)),\n    arrows: 3,\n    hasGold: false,\n    path: [agentPos],\n    autoMode: true,\n  };\n}\n\n// Directions: up, right, down, left\nconst DIRS = [\n  { dx: 0, dy: -1 },  // up\n  { dx: 1, dy: 0 },   // right\n  { dx: 0, dy: 1 },   // down\n  { dx: -1, dy: 0 },  // left\n];\n\n// Helper: shuffle an array in-place\nfunction shuffle<T>(array: T[]): T[] {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// Helper: get adjacent cells in random order\nfunction getAdjacent(x: number, y: number) {\n  const dirs = shuffle([...DIRS]);\n  return dirs\n    .map(({ dx, dy }) => ({ x: x + dx, y: y + dy }))\n    .filter(({ x, y }) => isValid(x, y));\n}\n\nfunction isValid(x: number, y: number) {\n  return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;\n}\n\n// Helper: detect threats in adjacent cells\nfunction detectThreats(game: GameState, x: number, y: number) {\n  let dangerLevel = 0;\n  let adjWumpus: { x: number; y: number } | null = null;\n  let adjBats = 0, adjPits = 0;\n  for (const { x: nx, y: ny } of getAdjacent(x, y)) {\n    const t = game.board[ny][nx].type;\n    if (t === 'wumpus') {\n      dangerLevel += 50;\n      adjWumpus = { x: nx, y: ny };\n    } else if (t === 'pit') {\n      dangerLevel += 10;\n      adjPits++;\n    } else if (t === 'bat') {\n      dangerLevel += 10;\n      adjBats++;\n    }\n  }\n  return { dangerLevel, adjWumpus, adjBats, adjPits };\n}\n\nexport function agentStep(game: GameState): GameState {\n  if (!game.agentState || game.status !== 'playing') return game;\n  const agent = game.agentState;\n\n  // Always get the current cell, even if stack is empty\n  const curr = agent.stack.length > 0 ? agent.stack[agent.stack.length - 1] : game.agentPos;\n  let log = game.actionLog ? [...game.actionLog] : [];\n\n  // Always update agentPos for UI and stats, even after teleport or backtrack\n  // --- MOVE VALIDATION: Ensure agent only moves to adjacent cells (except after bat teleport) ---\n  let illegalMove = false;\n  if (game.prevAgentPos) {\n    const dx = Math.abs(curr.x - game.prevAgentPos.x);\n    const dy = Math.abs(curr.y - game.prevAgentPos.y);\n    const isAdjacent = (dx + dy === 1);\n    const isTeleport = game.actionLog && game.actionLog[game.actionLog.length - 1]?.includes('bats');\n    if (!isAdjacent && !isTeleport) {\n      log.push(`ILLEGAL MOVE DETECTED: Agent jumped from (${game.prevAgentPos.x + 1},${game.prevAgentPos.y + 1}) to (${curr.x + 1},${curr.y + 1})`);\n      illegalMove = true;\n    }\n  }\n  if (illegalMove) {\n    // Revert agent position to previous valid cell and do not update stack/path\n    game.agentPos = { ...game.prevAgentPos! };\n    game.prevAgentPos = { ...game.prevAgentPos! };\n    return { ...game, actionLog: log };\n  }\n  game.prevAgentPos = { x: curr.x, y: curr.y };\n  game.agentPos = { x: curr.x, y: curr.y };\n\n  // Only log move if stack is not empty (i.e., a real move)\n  if (agent.stack.length > 0) {\n    agent.visited[curr.y][curr.x] = true;\n    game.explored[curr.y][curr.x] = true;\n    log.push(`Agent moved to (${curr.x + 1},${curr.y + 1})`);\n    // Mark explored\n    game.explored[curr.y][curr.x] = true;\n    // (No early return here)\n  }\n\n  // 1. Always check for threats (gold, pit, wumpus, bat) by cell type FIRST and return immediately if found\n  const cell = game.board[curr.y][curr.x];\n   if (cell.type === 'gold' && !agent.hasGold) {\n    agent.hasGold = true;\n    log.push('Agent found the gold! WON!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'won', actionLog: log };\n  }\n  if (cell.type === 'pit') {\n    log.push('Agent fell into a pit at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'lost', actionLog: log };\n  }\n  if (cell.type === 'wumpus') {\n    log.push('Agent encountered the Wumpus at this cell. Lost!');\n    const newExplored = game.explored.map((row, j) =>\n      row.map((val, i) => (i === curr.x && j === curr.y ? true : val))\n    );\n    return { ...game, agentPos: { x: curr.x, y: curr.y }, explored: newExplored, status: 'lost', actionLog: log };\n  }\n  if (cell.type === 'bat') {\n    // Bat: teleport, reset stack but keep visited and known dangers\n    const empty: { x: number; y: number }[] = [];\n    for (let y = 0; y < BOARD_SIZE; y++) for (let x = 0; x < BOARD_SIZE; x++)\n      if (game.board[y][x].type === 'empty' && !agent.visited[y][x]) empty.push({ x, y });\n    if (empty.length > 0) {\n      const idx = Math.floor(Math.random() * empty.length);\n      agent.stack = [empty[idx]];\n      agent.path = [empty[idx]];\n      log.push(`Agent was carried by bats from (${curr.x + 1},${curr.y + 1}) to (${empty[idx].x + 1},${empty[idx].y + 1})! Exploration history reset, known dangers kept.`);\n      // Update agentPos after teleport\n      game.agentPos = { x: empty[idx].x, y: empty[idx].y };\n      // After teleport, check for gold/pit/wumpus at new cell\n      const newCell = game.board[empty[idx].y][empty[idx].x];\n      if (newCell.type === 'gold' && !agent.hasGold) {\n        agent.hasGold = true;\n        log.push('Agent found the gold! WON!');\n        const newExplored = game.explored.map((row, j) =>\n          row.map((val, i) => (i === empty[idx].x && j === empty[idx].y ? true : val))\n        );\n        return { ...game, agentPos: { x: empty[idx].x, y: empty[idx].y }, explored: newExplored, status: 'won', actionLog: log };\n      }\n      if (newCell.type === 'pit') {\n        log.push('Agent fell into a pit at this cell. Lost!');\n        const newExplored = game.explored.map((row, j) =>\n          row.map((val, i) => (i === empty[idx].x && j === empty[idx].y ? true : val))\n        );\n        return { ...game, agentPos: { x: empty[idx].x, y: empty[idx].y }, explored: newExplored, status: 'lost', actionLog: log };\n      }\n      if (newCell.type === 'wumpus') {\n        log.push('Agent encountered the Wumpus at this cell. Lost!');\n        const newExplored = game.explored.map((row, j) =>\n          row.map((val, i) => (i === empty[idx].x && j === empty[idx].y ? true : val))\n        );\n        return { ...game, agentPos: { x: empty[idx].x, y: empty[idx].y }, explored: newExplored, status: 'lost', actionLog: log };\n      }\n      return { ...game, actionLog: log };\n    }\n  }\n\n  // 2. If stack is empty after all checks, then agent truly ran out of moves\n  if (agent.stack.length === 0) {\n    if (game.status === 'playing') {\n      const lastLog = (log).slice(-1)[0] || '';\n      if (/Lost!|WON!/i.test(lastLog)) {\n        return { ...game, status: 'lost', actionLog: log };\n      }\n      return { ...game, status: 'lost', actionLog: [...log, 'Agent ran out of moves. Lost!'] };\n    } else {\n      return game;\n    }\n  }\n\n  // 3. Detect adjacent threats and log sensory messages\n  const { dangerLevel, adjWumpus, adjBats, adjPits } = detectThreats(game, curr.x, curr.y);\n  if (adjWumpus) log.push('You smell something terrible nearby.');\n  if (adjPits) log.push('You feel a breeze nearby.');\n  if (adjBats) log.push('You hear flapping nearby.');\n\n  // 4. Wumpus shooting logic: shoot if adjacent and has arrows\n  if (adjWumpus && agent.arrows > 0 && !agent.justShot) {\n    agent.arrows--;\n    agent.justShot = true;\n    const hit = Math.random() < 0.125;\n    log.push(`Agent senses the Wumpus nearby and shoots. Arrows left: ${agent.arrows}`);\n    if (hit) {\n      game.board[adjWumpus.y][adjWumpus.x].type = 'empty';\n      log.push('Agent killed the Wumpus! WON!');\n      return { ...game, status: 'won', actionLog: log };\n    } else {\n      log.push('Agent missed the Wumpus and continues exploring.');\n      // Do not return; allow agent to continue exploring after missing\n    }\n  } else if (adjWumpus && agent.arrows === 0) {\n    log.push('Agent senses the Wumpus nearby but has no arrows left. Must continue exploring.');\n    // Do not return; allow agent to continue exploring after logging\n  }\n  if (agent.justShot) agent.justShot = false;\n\n  // 5. Pit/backtrack logic\n  if (adjPits > 0) {\n    log.push('Agent senses a pit nearby and backtracks.');\n    agent.stack.pop();\n    return { ...game, actionLog: log };\n  }\n  if (adjBats > 0) {\n    log.push('Agent hears bats nearby, will risk once.');\n  }\n  const neighbors = getAdjacent(curr.x, curr.y);\n  let hazardousNeighbor: { x: number; y: number } | null = null;\n  for (const n of neighbors) {\n    // Strict adjacency check before pushing any move\n    const dx = Math.abs(n.x - curr.x);\n    const dy = Math.abs(n.y - curr.y);\n    if (dx + dy !== 1) continue; // Only allow up/down/left/right\n    if (!agent.visited[n.y][n.x]) {\n      // --- WUMPUS LOOKAHEAD SHOOTING LOGIC ---\n      if (game.board[n.y][n.x].type === 'wumpus' && agent.arrows > 0) {\n        agent.arrows--;\n        agent.justShot = true;\n        const hit = Math.random() < 0.125;\n        log.push(`Agent sees the Wumpus ahead at (${n.x + 1},${n.y + 1}) and shoots. Arrows left: ${agent.arrows}`);\n        if (hit) {\n          game.board[n.y][n.x].type = 'empty';\n          log.push('Agent killed the Wumpus! WON!');\n          return { ...game, status: 'won', actionLog: log };\n        } else {\n          log.push('Agent missed the Wumpus and continues exploring.');\n          // Continue to next neighbor or move if no more arrows\n        }\n      } else if (game.board[n.y][n.x].type === 'wumpus' && agent.arrows === 0) {\n        log.push(`Agent sees the Wumpus ahead at (${n.x + 1},${n.y + 1}) but has no arrows left. Must risk moving.`);\n        // Continue to move into the Wumpus cell (will lose on next step)\n      }\n      // --- GOLD/PIT LOOKAHEAD LOGIC ---\n      if (game.board[n.y][n.x].type === 'gold' && !agent.hasGold) {\n        agent.hasGold = true;\n        log.push(`Agent sees gold ahead at (${n.x + 1},${n.y + 1}) and collects it! WON!`);\n        const newExplored = game.explored.map((row, j) =>\n          row.map((val, i) => (i === n.x && j === n.y ? true : val))\n        );\n        game.agentPos = { x: n.x, y: n.y }; // FIX: update agentPos after move\n        return { ...game, agentPos: { x: n.x, y: n.y }, explored: newExplored, status: 'won', actionLog: log };\n      }\n      // Instead of skipping pits, mark as hazardous and only avoid if other options exist\n      if (game.board[n.y][n.x].type === 'pit') {\n        log.push(`Agent sees a pit ahead at (${n.x + 1},${n.y + 1}) and marks it as hazardous.`);\n        if (!hazardousNeighbor) hazardousNeighbor = n;\n        agent.visited[n.y][n.x] = true; // Mark as visited to avoid unless forced\n        continue; // Try other options first\n      }\n      agent.stack.push(n);\n      agent.path.push(n);\n      game.agentPos = { x: n.x, y: n.y }; // Ensure agentPos is updated immediately after move\n      return { ...game, actionLog: log };\n    }\n  }\n  // If all options are visited, prefer hazardous (pit) cells before backtracking\n  if (hazardousNeighbor) {\n    // Strict adjacency check for hazardous move\n    const dx = Math.abs(hazardousNeighbor.x - curr.x);\n    const dy = Math.abs(hazardousNeighbor.y - curr.y);\n    if (dx + dy === 1) {\n      log.push(`Agent has no safe moves left and risks moving into pit at (${hazardousNeighbor.x + 1},${hazardousNeighbor.y + 1}).`);\n      agent.stack.push(hazardousNeighbor);\n      agent.path.push(hazardousNeighbor);\n      game.agentPos = { x: hazardousNeighbor.x, y: hazardousNeighbor.y }; // Ensure agentPos is updated\n      return { ...game, actionLog: log };\n    }\n  }\n  log.push('All options explored, backtracking.');\n  agent.stack.pop();\n  return { ...game, actionLog: log };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}