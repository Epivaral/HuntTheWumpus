{"ast":null,"code":"var _jsxFileName = \"/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Board from './components/Board';\nimport Stats from './components/Stats';\nimport Controls from './components/Controls';\nimport { createNewGame, createAgentState, agentStep } from './utils/gameLogic';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [game, setGame] = React.useState(() => {\n    const g = createNewGame();\n    g.agentState = createAgentState(g.agentPos);\n    return g;\n  });\n  const [mode, setMode] = React.useState('auto');\n  const [autoRunning, setAutoRunning] = React.useState(false);\n  const [log, setLog] = React.useState(game.actionLog || []);\n  React.useEffect(() => {\n    setLog(game.actionLog || []);\n  }, [game]);\n  const handleNewGame = () => {\n    const g = createNewGame();\n    g.agentState = createAgentState(g.agentPos);\n    setGame(g);\n    setAutoRunning(false);\n  };\n  const handleToggleMode = () => {\n    setMode(m => m === 'auto' ? 'manual' : 'auto');\n    setAutoRunning(false);\n  };\n  const handleStep = () => {\n    setGame(prev => agentStep({\n      ...prev,\n      agentState: prev.agentState\n    }));\n  };\n\n  // Auto play effect\n  React.useEffect(() => {\n    if (mode === 'auto' && autoRunning && game.status === 'playing') {\n      const t = setTimeout(() => handleStep(), 200);\n      return () => clearTimeout(t);\n    }\n  }, [mode, autoRunning, game]);\n  const handleAutoPlay = () => {\n    setAutoRunning(r => !r);\n  };\n\n  // Manual move handler\n  const handleManualMove = (dx, dy) => {\n    setGame(prev => {\n      if (prev.status !== 'playing') return prev;\n      const {\n        agentPos,\n        board,\n        agentState\n      } = prev;\n      const x = agentPos.x + dx;\n      const y = agentPos.y + dy;\n      if (x < 0 || x >= 20 || y < 0 || y >= 20) return prev;\n      let log = prev.actionLog ? [...prev.actionLog] : [];\n      log.push(`Agent moved to (${x + 1},${y + 1})`);\n      // Check for gold\n      if (x === prev.goldPos.x && y === prev.goldPos.y) {\n        // Mark explored\n        const newExplored = prev.explored.map((row, j) => row.map((val, i) => i === x && j === y ? true : val));\n        log.push('Agent found the gold! WON!');\n        return {\n          ...prev,\n          agentPos: {\n            x,\n            y\n          },\n          explored: newExplored,\n          status: 'won',\n          actionLog: log\n        };\n      }\n      // Check for threats\n      const cellType = prev.board[y][x].type;\n      if (cellType === 'pit') {\n        const newExplored = prev.explored.map((row, j) => row.map((val, i) => i === x && j === y ? true : val));\n        log.push('Agent fell into a pit at this cell. Lost!');\n        return {\n          ...prev,\n          agentPos: {\n            x,\n            y\n          },\n          explored: newExplored,\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      if (cellType === 'wumpus') {\n        const newExplored = prev.explored.map((row, j) => row.map((val, i) => i === x && j === y ? true : val));\n        log.push('Agent encountered the Wumpus at this cell. Lost!');\n        return {\n          ...prev,\n          agentPos: {\n            x,\n            y\n          },\n          explored: newExplored,\n          status: 'lost',\n          actionLog: log\n        };\n      }\n      if (cellType === 'bat') {\n        // Bat: teleport to random empty cell\n        const empties = [];\n        for (let j = 0; j < 20; j++) for (let i = 0; i < 20; i++) if (prev.board[j][i].type === 'empty') empties.push({\n          x: i,\n          y: j\n        });\n        if (empties.length > 0) {\n          const idx = Math.floor(Math.random() * empties.length);\n          const nx = empties[idx].x,\n            ny = empties[idx].y;\n          const teleExplored = prev.explored.map((row, j) => row.map((val, i) => i === nx && j === ny ? true : val));\n          log.push(`Agent was carried by bats from (${x + 1},${y + 1}) to (${nx + 1},${ny + 1})!`);\n          return {\n            ...prev,\n            agentPos: {\n              x: nx,\n              y: ny\n            },\n            explored: teleExplored,\n            actionLog: log\n          };\n        }\n      }\n      // Mark explored and update board (move agent)\n      const newBoard = board.map((row, j) => row.map((cell, i) => {\n        if (i === agentPos.x && j === agentPos.y) return {\n          ...cell,\n          type: cell.type === 'agent' ? 'empty' : cell.type\n        };\n        if (i === x && j === y) return {\n          ...cell,\n          type: 'agent',\n          explored: true\n        };\n        return cell;\n      }));\n      const newExplored = prev.explored.map((row, j) => row.map((val, i) => i === x && j === y ? true : val));\n      // Sensory messages\n      const adj = [[0, -1], [1, 0], [0, 1], [-1, 0]];\n      let adjWumpus = false,\n        adjPits = 0,\n        adjBats = 0;\n      for (const [dx2, dy2] of adj) {\n        const nx = x + dx2,\n          ny = y + dy2;\n        if (nx < 0 || nx >= 20 || ny < 0 || ny >= 20) continue;\n        const t = prev.board[ny][nx].type;\n        if (t === 'wumpus') adjWumpus = true;\n        if (t === 'pit') adjPits++;\n        if (t === 'bat') adjBats++;\n      }\n      if (adjWumpus) log.push('You smell something terrible nearby.');\n      if (adjPits) log.push('You feel a breeze nearby.');\n      if (adjBats) log.push('You hear flapping nearby.');\n      return {\n        ...prev,\n        agentPos: {\n          x,\n          y\n        },\n        board: newBoard,\n        explored: newExplored,\n        actionLog: log\n      };\n    });\n  };\n\n  // Manual shoot handler\n  const handleManualShoot = () => {\n    setGame(prev => {\n      if (prev.status !== 'playing') return prev;\n      const {\n        agentPos,\n        board,\n        agentState\n      } = prev;\n      let log = prev.actionLog ? [...prev.actionLog] : [];\n      // Check adjacent cells for Wumpus\n      const adj = [{\n        x: agentPos.x,\n        y: agentPos.y - 1\n      },\n      // Up\n      {\n        x: agentPos.x + 1,\n        y: agentPos.y\n      },\n      // Right\n      {\n        x: agentPos.x,\n        y: agentPos.y + 1\n      },\n      // Down\n      {\n        x: agentPos.x - 1,\n        y: agentPos.y\n      } // Left\n      ];\n      let wumpusFound = false;\n      for (const {\n        x,\n        y\n      } of adj) {\n        if (x < 0 || x >= 20 || y < 0 || y >= 20) continue;\n        if (prev.board[y][x].type === 'wumpus') {\n          wumpusFound = true;\n          break;\n        }\n      }\n      if (wumpusFound) {\n        log.push('You shoot and hit the Wumpus! You won!');\n        return {\n          ...prev,\n          status: 'won',\n          actionLog: log\n        };\n      } else {\n        log.push('You shoot and miss...');\n        return {\n          ...prev,\n          actionLog: log\n        };\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wumpus World\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stats, {\n      game: game\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      mode: mode,\n      onNewGame: handleNewGame,\n      onToggleMode: handleToggleMode,\n      onAutoPlay: handleAutoPlay,\n      autoRunning: autoRunning,\n      onStep: handleStep,\n      onShoot: handleManualShoot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      game: game,\n      onManualMove: handleManualMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"log\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Action Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: log.map((entry, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: entry\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"++He7vMCz7oaG9AsM9P3h95PM3U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Board","Stats","Controls","createNewGame","createAgentState","agentStep","jsxDEV","_jsxDEV","App","_s","game","setGame","useState","g","agentState","agentPos","mode","setMode","autoRunning","setAutoRunning","log","setLog","actionLog","useEffect","handleNewGame","handleToggleMode","m","handleStep","prev","status","t","setTimeout","clearTimeout","handleAutoPlay","r","handleManualMove","dx","dy","board","x","y","push","goldPos","newExplored","explored","map","row","j","val","i","cellType","type","empties","length","idx","Math","floor","random","nx","ny","teleExplored","newBoard","cell","adj","adjWumpus","adjPits","adjBats","dx2","dy2","handleManualShoot","wumpusFound","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onNewGame","onToggleMode","onAutoPlay","onStep","onShoot","onManualMove","entry","_c","$RefreshReg$"],"sources":["/workspaces/HuntTheWumpus/hunt-the-wumpus-react/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport Board from './components/Board';\nimport Stats from './components/Stats';\nimport Controls from './components/Controls';\nimport { createNewGame, createAgentState, agentStep } from './utils/gameLogic';\nimport { GameState } from './utils/gameTypes';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [game, setGame] = React.useState<GameState>(() => {\n    const g = createNewGame();\n    g.agentState = createAgentState(g.agentPos);\n    return g;\n  });\n  const [mode, setMode] = React.useState<'auto' | 'manual'>('auto');\n  const [autoRunning, setAutoRunning] = React.useState(false);\n  const [log, setLog] = React.useState<string[]>(game.actionLog || []);\n\n  React.useEffect(() => {\n    setLog(game.actionLog || []);\n  }, [game]);\n\n  const handleNewGame = () => {\n    const g = createNewGame();\n    g.agentState = createAgentState(g.agentPos);\n    setGame(g);\n    setAutoRunning(false);\n  };\n\n  const handleToggleMode = () => {\n    setMode((m) => (m === 'auto' ? 'manual' : 'auto'));\n    setAutoRunning(false);\n  };\n\n  const handleStep = () => {\n    setGame((prev) => agentStep({ ...prev, agentState: prev.agentState }));\n  };\n\n  // Auto play effect\n  React.useEffect(() => {\n    if (mode === 'auto' && autoRunning && game.status === 'playing') {\n      const t = setTimeout(() => handleStep(), 200);\n      return () => clearTimeout(t);\n    }\n  }, [mode, autoRunning, game]);\n\n  const handleAutoPlay = () => {\n    setAutoRunning((r) => !r);\n  };\n\n  // Manual move handler\n  const handleManualMove = (dx: number, dy: number) => {\n    setGame((prev) => {\n      if (prev.status !== 'playing') return prev;\n      const { agentPos, board, agentState } = prev;\n      const x = agentPos.x + dx;\n      const y = agentPos.y + dy;\n      if (x < 0 || x >= 20 || y < 0 || y >= 20) return prev;\n      let log = prev.actionLog ? [...prev.actionLog] : [];\n      log.push(`Agent moved to (${x + 1},${y + 1})`);\n      // Check for gold\n      if (x === prev.goldPos.x && y === prev.goldPos.y) {\n        // Mark explored\n        const newExplored = prev.explored.map((row, j) =>\n          row.map((val, i) => (i === x && j === y ? true : val))\n        );\n        log.push('Agent found the gold! WON!');\n        return { ...prev, agentPos: { x, y }, explored: newExplored, status: 'won', actionLog: log };\n      }\n      // Check for threats\n      const cellType = prev.board[y][x].type;\n      if (cellType === 'pit') {\n        const newExplored = prev.explored.map((row, j) =>\n          row.map((val, i) => (i === x && j === y ? true : val))\n        );\n        log.push('Agent fell into a pit at this cell. Lost!');\n        return { ...prev, agentPos: { x, y }, explored: newExplored, status: 'lost', actionLog: log };\n      }\n      if (cellType === 'wumpus') {\n        const newExplored = prev.explored.map((row, j) =>\n          row.map((val, i) => (i === x && j === y ? true : val))\n        );\n        log.push('Agent encountered the Wumpus at this cell. Lost!');\n        return { ...prev, agentPos: { x, y }, explored: newExplored, status: 'lost', actionLog: log };\n      }\n      if (cellType === 'bat') {\n        // Bat: teleport to random empty cell\n        const empties: { x: number; y: number }[] = [];\n        for (let j = 0; j < 20; j++) for (let i = 0; i < 20; i++)\n          if (prev.board[j][i].type === 'empty') empties.push({ x: i, y: j });\n        if (empties.length > 0) {\n          const idx = Math.floor(Math.random() * empties.length);\n          const nx = empties[idx].x, ny = empties[idx].y;\n          const teleExplored = prev.explored.map((row, j) =>\n            row.map((val, i) => (i === nx && j === ny ? true : val))\n          );\n          log.push(`Agent was carried by bats from (${x + 1},${y + 1}) to (${nx + 1},${ny + 1})!`);\n          return { ...prev, agentPos: { x: nx, y: ny }, explored: teleExplored, actionLog: log };\n        }\n      }\n      // Mark explored and update board (move agent)\n      const newBoard = board.map((row, j) =>\n        row.map((cell, i) => {\n          if (i === agentPos.x && j === agentPos.y) return { ...cell, type: cell.type === 'agent' ? 'empty' as const : cell.type };\n          if (i === x && j === y) return { ...cell, type: 'agent' as const, explored: true };\n          return cell;\n        })\n      );\n      const newExplored = prev.explored.map((row, j) =>\n        row.map((val, i) => (i === x && j === y ? true : val))\n      );\n      // Sensory messages\n      const adj = [\n        [0, -1], [1, 0], [0, 1], [-1, 0]\n      ];\n      let adjWumpus = false, adjPits = 0, adjBats = 0;\n      for (const [dx2, dy2] of adj) {\n        const nx = x + dx2, ny = y + dy2;\n        if (nx < 0 || nx >= 20 || ny < 0 || ny >= 20) continue;\n        const t = prev.board[ny][nx].type;\n        if (t === 'wumpus') adjWumpus = true;\n        if (t === 'pit') adjPits++;\n        if (t === 'bat') adjBats++;\n      }\n      if (adjWumpus) log.push('You smell something terrible nearby.');\n      if (adjPits) log.push('You feel a breeze nearby.');\n      if (adjBats) log.push('You hear flapping nearby.');\n      return { ...prev, agentPos: { x, y }, board: newBoard, explored: newExplored, actionLog: log };\n    });\n  };\n\n  // Manual shoot handler\n  const handleManualShoot = () => {\n    setGame((prev) => {\n      if (prev.status !== 'playing') return prev;\n      const { agentPos, board, agentState } = prev;\n      let log = prev.actionLog ? [...prev.actionLog] : [];\n      // Check adjacent cells for Wumpus\n      const adj = [\n        { x: agentPos.x, y: agentPos.y - 1 }, // Up\n        { x: agentPos.x + 1, y: agentPos.y }, // Right\n        { x: agentPos.x, y: agentPos.y + 1 }, // Down\n        { x: agentPos.x - 1, y: agentPos.y }  // Left\n      ];\n      let wumpusFound = false;\n      for (const { x, y } of adj) {\n        if (x < 0 || x >= 20 || y < 0 || y >= 20) continue;\n        if (prev.board[y][x].type === 'wumpus') {\n          wumpusFound = true;\n          break;\n        }\n      }\n      if (wumpusFound) {\n        log.push('You shoot and hit the Wumpus! You won!');\n        return { ...prev, status: 'won', actionLog: log };\n      } else {\n        log.push('You shoot and miss...');\n        return { ...prev, actionLog: log };\n      }\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Wumpus World</h1>\n      <Stats game={game} />\n      <Controls\n        mode={mode}\n        onNewGame={handleNewGame}\n        onToggleMode={handleToggleMode}\n        onAutoPlay={handleAutoPlay}\n        autoRunning={autoRunning}\n        onStep={handleStep}\n        onShoot={handleManualShoot}\n      />\n      <Board game={game} onManualMove={handleManualMove} />\n      <div className=\"log\">\n        <h2>Action Log</h2>\n        <ul>\n          {log.map((entry, idx) => (\n            <li key={idx}>{entry}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}